{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"wg-access-server \u00b6 wg-access-server is a single binary file that contains a WireGuard VPN server and a web user interface for device management. We support user authentication, 1-click device enrollment that works with macOS, Linux, Windows, iOS/iPadOS and Android including QR codes. Furthermore, you can choose from different network isolation modes for a better control over connected devices. Generally speaking you can customize the project to your use-case with relative ease. This project aims to provide a simple VPN solution for developers, homelab enthusiasts, and anyone else who is adventurous. This is a fork of the original work of place1, maintained by Freifunk Munich . Since the upstream is currently unmaintained, we try to add new features and keep the project up to date and in a working state. This fork supports IPv6. The VPN can run in dual-stack, IPv6-only or IPv4-only mode. NAT can be disabled separately for IPv4 and IPv6. Contributions are always welcome so that we can offer new bug fixes, features and improvements to the users of this project . Features \u00b6 Pluggable authentication using OpenID Connect Authentication using GitLab PostgreSQL, MySQL or SQLite3 storage backend WireGuard client configuration QR codes IPv6 support in tunnel Caching DNS proxy (stub resolver) Client isolation (optional) WireGuard kernel module for improved performance and latency Automatic fallback to embedded userspace implementation for easy container deployment Documentation \u00b6 See our documentation website Quick Links: Configuration Overview Deploy With Docker Deploy With Docker-Compose Deploy With Helm Running with Docker \u00b6 Here is a quick command to start the wg-access-server for the first time and try it out. export WG_ADMIN_PASSWORD = $( tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1 ) export WG_WIREGUARD_PRIVATE_KEY = \" $( wg genkey ) \" echo \"Your automatically generated admin password for the wg-access-server's web interface: $WG_ADMIN_PASSWORD \" docker run \\ -it \\ --rm \\ --cap-add NET_ADMIN \\ --cap-add SYS_MODULE \\ --device /dev/net/tun:/dev/net/tun \\ --sysctl net.ipv6.conf.all.disable_ipv6 = 0 \\ --sysctl net.ipv6.conf.all.forwarding = 1 \\ -v wg-access-server-data:/data \\ -v /lib/modules:/lib/modules:ro \\ -e \"WG_ADMIN_PASSWORD= $WG_ADMIN_PASSWORD \" \\ -e \"WG_WIREGUARD_PRIVATE_KEY= $WG_WIREGUARD_PRIVATE_KEY \" \\ -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ ghcr.io/freifunkmuc/wg-access-server:latest Note: This command includes the SYS_MODULE capability which essentially gives the container root privileges over the host system and an attacker could easily break out of the container. See the Docker instructions for the recommended way to run the container. If the wg-access-server is accessible via LAN or a network you are in, you can directly connect your phone to the VPN. You have to call the webfrontent of the project for this. Normally, this is done via the IP address of the device or server on which the wg-access-server is running followed by the standard port 8000, via which the web interface can be reached. For most deployments something like this should work: http://192.168.0.XX:8000 If the project is running locally on the computer, you can easily connect to the web interface by connecting to http://localhost:8000 in the browser. Running with Docker-Compose \u00b6 Please also read the Docker instructions for general information regarding Docker deployments. Download the the docker-compose.yml file from the repo and run the following command. export WG_ADMIN_PASSWORD = $( tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1 ) export WG_WIREGUARD_PRIVATE_KEY = \" $( wg genkey ) \" echo \"Your automatically generated admin password for the wg-access-server's web interface: $WG_ADMIN_PASSWORD \" docker-compose up You can connect to the web server on the local machine browser at http://localhost:8000 If you open your browser to your machine's LAN IP address you'll be able to connect your phone using the UI and QR code! Running on Kubernetes via Helm \u00b6 The Helm chart included in this repository has been removed due to lack of expertise on our side and nobody answering our call for aid. If you are a Kubernetes/Helm user, please consider stepping up and taking over maintenance of the chart at https://github.com/freifunkMUC/wg-access-server-chart. Screenshots \u00b6 Changelog \u00b6 See the Releases section Development \u00b6 The software consists of a Golang server and a React app. If you want to make changes to the project locally, you can do so relatively easily with the following steps. Run cd website && npm install && npm start to get the frontend running on :3000 . Run sudo go run ./main.go to get the server running on :8000 . Here are some notes on development configuration: sudo is required because the server uses iptables/ip to configure the VPN network access to the website is on :3000 and API requests are redirected to :8000 thanks to webpack in-memory storage and generated WireGuard keys are used gRPC code generation: \u00b6 The client communicates with the server via gRPC web. You can edit the API specification in ./proto/*.proto . After changing a service or message definition, you must regenerate the server and client code: ./codegen.sh cd website && npm run codegen Or use the Dockerfile at proto/Dockerfile : docker build -f proto/Dockerfile --target proto-js -t wg-access-server-proto:js . docker build -f proto/Dockerfile --target proto-go -t wg-access-server-proto:go . docker run --rm -v ` pwd ` /proto:/proto -v ` pwd ` /website/src/sdk:/code/src/sdk wg-access-server-proto:js docker run --rm -v ` pwd ` /proto:/code/proto wg-access-server-proto:go","title":"Home"},{"location":"#wg-access-server","text":"wg-access-server is a single binary file that contains a WireGuard VPN server and a web user interface for device management. We support user authentication, 1-click device enrollment that works with macOS, Linux, Windows, iOS/iPadOS and Android including QR codes. Furthermore, you can choose from different network isolation modes for a better control over connected devices. Generally speaking you can customize the project to your use-case with relative ease. This project aims to provide a simple VPN solution for developers, homelab enthusiasts, and anyone else who is adventurous. This is a fork of the original work of place1, maintained by Freifunk Munich . Since the upstream is currently unmaintained, we try to add new features and keep the project up to date and in a working state. This fork supports IPv6. The VPN can run in dual-stack, IPv6-only or IPv4-only mode. NAT can be disabled separately for IPv4 and IPv6. Contributions are always welcome so that we can offer new bug fixes, features and improvements to the users of this project .","title":"wg-access-server"},{"location":"#features","text":"Pluggable authentication using OpenID Connect Authentication using GitLab PostgreSQL, MySQL or SQLite3 storage backend WireGuard client configuration QR codes IPv6 support in tunnel Caching DNS proxy (stub resolver) Client isolation (optional) WireGuard kernel module for improved performance and latency Automatic fallback to embedded userspace implementation for easy container deployment","title":"Features"},{"location":"#documentation","text":"See our documentation website Quick Links: Configuration Overview Deploy With Docker Deploy With Docker-Compose Deploy With Helm","title":"Documentation"},{"location":"#running-with-docker","text":"Here is a quick command to start the wg-access-server for the first time and try it out. export WG_ADMIN_PASSWORD = $( tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1 ) export WG_WIREGUARD_PRIVATE_KEY = \" $( wg genkey ) \" echo \"Your automatically generated admin password for the wg-access-server's web interface: $WG_ADMIN_PASSWORD \" docker run \\ -it \\ --rm \\ --cap-add NET_ADMIN \\ --cap-add SYS_MODULE \\ --device /dev/net/tun:/dev/net/tun \\ --sysctl net.ipv6.conf.all.disable_ipv6 = 0 \\ --sysctl net.ipv6.conf.all.forwarding = 1 \\ -v wg-access-server-data:/data \\ -v /lib/modules:/lib/modules:ro \\ -e \"WG_ADMIN_PASSWORD= $WG_ADMIN_PASSWORD \" \\ -e \"WG_WIREGUARD_PRIVATE_KEY= $WG_WIREGUARD_PRIVATE_KEY \" \\ -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ ghcr.io/freifunkmuc/wg-access-server:latest Note: This command includes the SYS_MODULE capability which essentially gives the container root privileges over the host system and an attacker could easily break out of the container. See the Docker instructions for the recommended way to run the container. If the wg-access-server is accessible via LAN or a network you are in, you can directly connect your phone to the VPN. You have to call the webfrontent of the project for this. Normally, this is done via the IP address of the device or server on which the wg-access-server is running followed by the standard port 8000, via which the web interface can be reached. For most deployments something like this should work: http://192.168.0.XX:8000 If the project is running locally on the computer, you can easily connect to the web interface by connecting to http://localhost:8000 in the browser.","title":"Running with Docker"},{"location":"#running-with-docker-compose","text":"Please also read the Docker instructions for general information regarding Docker deployments. Download the the docker-compose.yml file from the repo and run the following command. export WG_ADMIN_PASSWORD = $( tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1 ) export WG_WIREGUARD_PRIVATE_KEY = \" $( wg genkey ) \" echo \"Your automatically generated admin password for the wg-access-server's web interface: $WG_ADMIN_PASSWORD \" docker-compose up You can connect to the web server on the local machine browser at http://localhost:8000 If you open your browser to your machine's LAN IP address you'll be able to connect your phone using the UI and QR code!","title":"Running with Docker-Compose"},{"location":"#running-on-kubernetes-via-helm","text":"The Helm chart included in this repository has been removed due to lack of expertise on our side and nobody answering our call for aid. If you are a Kubernetes/Helm user, please consider stepping up and taking over maintenance of the chart at https://github.com/freifunkMUC/wg-access-server-chart.","title":"Running on Kubernetes via Helm"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#changelog","text":"See the Releases section","title":"Changelog"},{"location":"#development","text":"The software consists of a Golang server and a React app. If you want to make changes to the project locally, you can do so relatively easily with the following steps. Run cd website && npm install && npm start to get the frontend running on :3000 . Run sudo go run ./main.go to get the server running on :8000 . Here are some notes on development configuration: sudo is required because the server uses iptables/ip to configure the VPN network access to the website is on :3000 and API requests are redirected to :8000 thanks to webpack in-memory storage and generated WireGuard keys are used","title":"Development"},{"location":"#grpc-code-generation","text":"The client communicates with the server via gRPC web. You can edit the API specification in ./proto/*.proto . After changing a service or message definition, you must regenerate the server and client code: ./codegen.sh cd website && npm run codegen Or use the Dockerfile at proto/Dockerfile : docker build -f proto/Dockerfile --target proto-js -t wg-access-server-proto:js . docker build -f proto/Dockerfile --target proto-go -t wg-access-server-proto:go . docker run --rm -v ` pwd ` /proto:/proto -v ` pwd ` /website/src/sdk:/code/src/sdk wg-access-server-proto:js docker run --rm -v ` pwd ` /proto:/code/proto wg-access-server-proto:go","title":"gRPC code generation:"},{"location":"2-configuration/","text":"Configuration \u00b6 You can configure wg-access-server using environment variables, cli flags or a config file taking precedence over one another in that order. The default configuration should work out of the box if you're just looking to try it out. The only required configuration is a wireguard private key. You can generate a wireguard private key by following the official docs . TLDR: wg genkey The config file format is yaml and an example is provided below . The format for specifying multiple values for options that allow it is: * as commandline flags: * repeat the flag (e.g. --dns-upstream 2001:db8::1 --dns-upstream 192.0.2.1 ) * separate the values with a comma (e.g. --dns-upstream 2001:db8::1,192.0.2.1 ) * as environment variables: * separate with a comma (e.g. WG_DNS_UPSTREAM=\"2001:db8::1,192.0.2.1\" ) * separate with a new line char (e.g. WG_DNS_UPSTREAM=$'2001:db8::1\\n192.0.2.1' ) * in the config file as YAML list. Here's what you can configure: Environment Variable CLI Flag Config File Path Required Default (docker) Description WG_CONFIG --config The path to a wg-access-server config.yaml file WG_LOG_LEVEL --log-level logLevel info The global log level WG_ADMIN_USERNAME --admin-username adminUsername admin The admin account username WG_ADMIN_PASSWORD --admin-password adminPassword Yes The admin account password WG_PORT --port port 8000 The port the web ui will listen on (http) WG_EXTERNAL_HOST --external-host externalHost The external domain for the server (e.g. www.mydomain.com) WG_STORAGE --storage storage sqlite3:///data/db.sqlite3 A storage backend connection string. See storage docs WG_DISABLE_METADATA --disable-metadata disableMetadata false Turn off collection of device metadata logging. Includes last handshake time and RX/TX bytes only. WG_FILENAME --filename filename WireGuard Change the name of the configuration file the user can download (Do not include the '.conf' extension ) WG_WIREGUARD_ENABLED --[no-]wireguard-enabled wireguard.enabled true Enable/disable the wireguard server. Useful for development on non-linux machines. WG_WIREGUARD_INTERFACE --wireguard-interface wireguard.interface wg0 The wireguard network interface name WG_WIREGUARD_PRIVATE_KEY --wireguard-private-key wireguard.privateKey Yes The wireguard private key. This value is required and must be stable. If this value changes all devices must re-register. WG_WIREGUARD_PORT --wireguard-port wireguard.port 51820 The wireguard server port (udp) WG_VPN_CIDR --vpn-cidr vpn.cidr 10.44.0.0/24 The VPN IPv4 network range. VPN clients will be assigned IP addresses in this range. Set to 0 to disable IPv4. WG_IPV4_NAT_ENABLED --vpn-nat44-enabled vpn.nat44 true Disables NAT for IPv4 WG_IPV6_NAT_ENABLED --vpn-nat66-enabled vpn.nat66 true Disables NAT for IPv6 WG_VPN_CLIENT_ISOLATION --vpn-client-isolation vpn.clientIsolation false BLock or allow traffic between client devices (client isolation) WG_VPN_CIDRV6 --vpn-cidrv6 vpn.cidrv6 fd48:4c4:7aa9::/64 The VPN IPv6 network range. VPN clients will be assigned IP addresses in this range. Set to 0 to disable IPv6. WG_VPN_GATEWAY_INTERFACE --vpn-gateway-interface vpn.gatewayInterface default gateway interface (e.g. eth0) The VPN gateway interface. VPN client traffic will be forwarded to this interface. WG_VPN_ALLOWED_IPS --vpn-allowed-ips vpn.allowedIPs 0.0.0.0/0, ::/0 Allowed IPs that clients may route through this VPN. This will be set in the client's WireGuard connection file and routing is also enforced by the server using iptables. WG_DNS_ENABLED --[no-]dns-enabled dns.enabled true Enable/disable the embedded DNS proxy server. This is enabled by default and allows VPN clients to avoid DNS leaks by sending all DNS requests to wg-access-server itself. WG_DNS_UPSTREAM --dns-upstream dns.upstream resolvconf autodetection or Cloudflare DNS The upstream DNS servers to proxy DNS requests to. By default the host machine's resolveconf configuration is used to find its upstream DNS server, with a fallback to Cloudflare. WG_DNS_DOMAIN --dns-domain dns.domain A domain to serve configured devices authoritatively. Queries for names in the format . . will be answered with the device's IP addresses. The Config File (config.yaml) \u00b6 Here's an example config file to get started with. loglevel : info storage : sqlite3:///data/db.sqlite3 wireguard : privateKey : \"<some-key>\" dns : upstream : - \"2001:4860:4860::8888\" - \"8.8.8.8\"","title":"Configuration"},{"location":"2-configuration/#configuration","text":"You can configure wg-access-server using environment variables, cli flags or a config file taking precedence over one another in that order. The default configuration should work out of the box if you're just looking to try it out. The only required configuration is a wireguard private key. You can generate a wireguard private key by following the official docs . TLDR: wg genkey The config file format is yaml and an example is provided below . The format for specifying multiple values for options that allow it is: * as commandline flags: * repeat the flag (e.g. --dns-upstream 2001:db8::1 --dns-upstream 192.0.2.1 ) * separate the values with a comma (e.g. --dns-upstream 2001:db8::1,192.0.2.1 ) * as environment variables: * separate with a comma (e.g. WG_DNS_UPSTREAM=\"2001:db8::1,192.0.2.1\" ) * separate with a new line char (e.g. WG_DNS_UPSTREAM=$'2001:db8::1\\n192.0.2.1' ) * in the config file as YAML list. Here's what you can configure: Environment Variable CLI Flag Config File Path Required Default (docker) Description WG_CONFIG --config The path to a wg-access-server config.yaml file WG_LOG_LEVEL --log-level logLevel info The global log level WG_ADMIN_USERNAME --admin-username adminUsername admin The admin account username WG_ADMIN_PASSWORD --admin-password adminPassword Yes The admin account password WG_PORT --port port 8000 The port the web ui will listen on (http) WG_EXTERNAL_HOST --external-host externalHost The external domain for the server (e.g. www.mydomain.com) WG_STORAGE --storage storage sqlite3:///data/db.sqlite3 A storage backend connection string. See storage docs WG_DISABLE_METADATA --disable-metadata disableMetadata false Turn off collection of device metadata logging. Includes last handshake time and RX/TX bytes only. WG_FILENAME --filename filename WireGuard Change the name of the configuration file the user can download (Do not include the '.conf' extension ) WG_WIREGUARD_ENABLED --[no-]wireguard-enabled wireguard.enabled true Enable/disable the wireguard server. Useful for development on non-linux machines. WG_WIREGUARD_INTERFACE --wireguard-interface wireguard.interface wg0 The wireguard network interface name WG_WIREGUARD_PRIVATE_KEY --wireguard-private-key wireguard.privateKey Yes The wireguard private key. This value is required and must be stable. If this value changes all devices must re-register. WG_WIREGUARD_PORT --wireguard-port wireguard.port 51820 The wireguard server port (udp) WG_VPN_CIDR --vpn-cidr vpn.cidr 10.44.0.0/24 The VPN IPv4 network range. VPN clients will be assigned IP addresses in this range. Set to 0 to disable IPv4. WG_IPV4_NAT_ENABLED --vpn-nat44-enabled vpn.nat44 true Disables NAT for IPv4 WG_IPV6_NAT_ENABLED --vpn-nat66-enabled vpn.nat66 true Disables NAT for IPv6 WG_VPN_CLIENT_ISOLATION --vpn-client-isolation vpn.clientIsolation false BLock or allow traffic between client devices (client isolation) WG_VPN_CIDRV6 --vpn-cidrv6 vpn.cidrv6 fd48:4c4:7aa9::/64 The VPN IPv6 network range. VPN clients will be assigned IP addresses in this range. Set to 0 to disable IPv6. WG_VPN_GATEWAY_INTERFACE --vpn-gateway-interface vpn.gatewayInterface default gateway interface (e.g. eth0) The VPN gateway interface. VPN client traffic will be forwarded to this interface. WG_VPN_ALLOWED_IPS --vpn-allowed-ips vpn.allowedIPs 0.0.0.0/0, ::/0 Allowed IPs that clients may route through this VPN. This will be set in the client's WireGuard connection file and routing is also enforced by the server using iptables. WG_DNS_ENABLED --[no-]dns-enabled dns.enabled true Enable/disable the embedded DNS proxy server. This is enabled by default and allows VPN clients to avoid DNS leaks by sending all DNS requests to wg-access-server itself. WG_DNS_UPSTREAM --dns-upstream dns.upstream resolvconf autodetection or Cloudflare DNS The upstream DNS servers to proxy DNS requests to. By default the host machine's resolveconf configuration is used to find its upstream DNS server, with a fallback to Cloudflare. WG_DNS_DOMAIN --dns-domain dns.domain A domain to serve configured devices authoritatively. Queries for names in the format . . will be answered with the device's IP addresses.","title":"Configuration"},{"location":"2-configuration/#the-config-file-configyaml","text":"Here's an example config file to get started with. loglevel : info storage : sqlite3:///data/db.sqlite3 wireguard : privateKey : \"<some-key>\" dns : upstream : - \"2001:4860:4860::8888\" - \"8.8.8.8\"","title":"The Config File (config.yaml)"},{"location":"3-storage/","text":"Storage \u00b6 wg-access-server supports 4 storage backends. Backend Persistent Supports HA Use Case memory \u274c \u274c Local development sqlite3 \u2714\ufe0f \u274c Production - single instance deployments postgres \u2714\ufe0f \u2714\ufe0f Production - multi instance deployments mysql \u2714\ufe0f \u274c Production - single instance deployments Backends \u00b6 Memory \u00b6 This is the default backend if you're running the binary directly and haven't configured another storage backend. Data will be lost between restarts. Handy for development. SQLite3 \u00b6 This is the default backend if you're running the docker container directly or using docker-compose. The database file will be written to /data/db.sqlite3 within the container by default. Sqlite3 is probably the simplest storage backend to get started with because it doesn't require any additional setup to be done. It should work out of the box and should be able to support a large number of users & devices. Example connection string: Relative path: sqlite3://path/to/db.sqlite3 Absolute path: sqlite3:///absolute/path/to/db.sqlite3 PostgreSQL \u00b6 This backend requires an external Postgres database to be deployed. Postgres experimentally supports highly-available deployments of wg-access-server and is the recommended storage backend where possible. If you have pgbouncer running in front of PostgreSQL, make sure it is running in \"Session pooling\" mode, as the more aggressive modes like \"Transaction Pooling\" break LISTEN/NOTIFY which we rely on. Example connection string: postgresql://user:password@localhost:5432/database?sslmode=disable MySQL \u00b6 This backend requires an external Mysql database to be deployed. Mysql flavours should be compatible. wg-access-server uses this golang driver if you want to check the compatibility of your favorite flavour. Example connection string: mysql://user:password@localhost:3306/database?ssl-mode=disabled File (removed) \u00b6 The file:// backend was deprecated in 0.3.0 and has been removed in 0.4.0 If you'd like to migrate your file:// storage to a supported backend you must use version 0.3.0 and then follow the migration guide below to migrate to a different storage backend. Note that the migration tool itself doesn't support the file:// backend on versions released after 0.3.0 . Migration Between Backends \u00b6 You can migrate your registered devices between backends using the wg-access-server migrate <src> <dest> command. The migrate command was added in v0.3.0 and is provided on a best effort level. As an open source project any community support here is warmly welcomed. Example: file:// to sqlite3:// \u00b6 If you're using the now deprecated file:// backend you can migrate to sqlite3:// like this: # after upgrading to place1/wg-access-server:v0.3.0 docker exec -it <container-name> wg-access-server migrate file:///data sqlite3:///data/db.sqlite3 If you need to do the above within a kubernetes deployment substitute docker exec with the equivalent kubectl exec command. The migrate command is non-destructive but it's always a good idea to take a backup of your data first! Example: sqlite3:// to postgresql:// \u00b6 First you'll need to make sure your postgres server is up and that you can connect to it from your wg-access-server container/pod/vm. wg-access-server migrate sqlite3:///data/db.sqlite3 postgresql://user:password@localhost:5432/database?sslmode = disable Remember to update your wg-access-server config to connect to postgres \ud83d\ude00","title":"Storage"},{"location":"3-storage/#storage","text":"wg-access-server supports 4 storage backends. Backend Persistent Supports HA Use Case memory \u274c \u274c Local development sqlite3 \u2714\ufe0f \u274c Production - single instance deployments postgres \u2714\ufe0f \u2714\ufe0f Production - multi instance deployments mysql \u2714\ufe0f \u274c Production - single instance deployments","title":"Storage"},{"location":"3-storage/#backends","text":"","title":"Backends"},{"location":"3-storage/#memory","text":"This is the default backend if you're running the binary directly and haven't configured another storage backend. Data will be lost between restarts. Handy for development.","title":"Memory"},{"location":"3-storage/#sqlite3","text":"This is the default backend if you're running the docker container directly or using docker-compose. The database file will be written to /data/db.sqlite3 within the container by default. Sqlite3 is probably the simplest storage backend to get started with because it doesn't require any additional setup to be done. It should work out of the box and should be able to support a large number of users & devices. Example connection string: Relative path: sqlite3://path/to/db.sqlite3 Absolute path: sqlite3:///absolute/path/to/db.sqlite3","title":"SQLite3"},{"location":"3-storage/#postgresql","text":"This backend requires an external Postgres database to be deployed. Postgres experimentally supports highly-available deployments of wg-access-server and is the recommended storage backend where possible. If you have pgbouncer running in front of PostgreSQL, make sure it is running in \"Session pooling\" mode, as the more aggressive modes like \"Transaction Pooling\" break LISTEN/NOTIFY which we rely on. Example connection string: postgresql://user:password@localhost:5432/database?sslmode=disable","title":"PostgreSQL"},{"location":"3-storage/#mysql","text":"This backend requires an external Mysql database to be deployed. Mysql flavours should be compatible. wg-access-server uses this golang driver if you want to check the compatibility of your favorite flavour. Example connection string: mysql://user:password@localhost:3306/database?ssl-mode=disabled","title":"MySQL"},{"location":"3-storage/#file-removed","text":"The file:// backend was deprecated in 0.3.0 and has been removed in 0.4.0 If you'd like to migrate your file:// storage to a supported backend you must use version 0.3.0 and then follow the migration guide below to migrate to a different storage backend. Note that the migration tool itself doesn't support the file:// backend on versions released after 0.3.0 .","title":"File (removed)"},{"location":"3-storage/#migration-between-backends","text":"You can migrate your registered devices between backends using the wg-access-server migrate <src> <dest> command. The migrate command was added in v0.3.0 and is provided on a best effort level. As an open source project any community support here is warmly welcomed.","title":"Migration Between Backends"},{"location":"3-storage/#example-file-to-sqlite3","text":"If you're using the now deprecated file:// backend you can migrate to sqlite3:// like this: # after upgrading to place1/wg-access-server:v0.3.0 docker exec -it <container-name> wg-access-server migrate file:///data sqlite3:///data/db.sqlite3 If you need to do the above within a kubernetes deployment substitute docker exec with the equivalent kubectl exec command. The migrate command is non-destructive but it's always a good idea to take a backup of your data first!","title":"Example: file:// to sqlite3://"},{"location":"3-storage/#example-sqlite3-to-postgresql","text":"First you'll need to make sure your postgres server is up and that you can connect to it from your wg-access-server container/pod/vm. wg-access-server migrate sqlite3:///data/db.sqlite3 postgresql://user:password@localhost:5432/database?sslmode = disable Remember to update your wg-access-server config to connect to postgres \ud83d\ude00","title":"Example: sqlite3:// to postgresql://"},{"location":"4-auth/","text":"Authentication \u00b6 Authentication is pluggable in wg-access-server. Community contributions are welcome for supporting new authentication backends. If you're just getting started you can skip over this section and rely on the default admin account instead. If your authentication system is not yet supported and you aren't quite ready to contribute you could try using a project like dex or SaaS provider like Auth0 which supports a wider variety of authentication protocols. wg-access-server can happily be an OpenID Connect client to a larger solution like this. The following authentication backends are currently supported: Backend Use Case Notes Simple Auth Deployments with a static list of users. Simple and great for self-hosters and home use-cases Recommended, default for the admin account Basic Auth Like Simple Auth, but using HTTP Basic Auth for login Logout does not work because browsers caches Basic Auth credentials OpenID Connect For delegating authentication to an existing identity solution Gitlab For delegating authentication to gitlab. Supports self-hosted Gitlab. If adminPassword is set, an administrator account will be added with the username of adminUsername (default admin ) to the Simple Auth or Basic Auth backend; whichever is enabled, automatically enabling Simple if both are unset, preferring Simple to Basic if both are enabled. Configuration \u00b6 Currently authentication providers are only configurable via the wg-access-server config file (config.yaml). Below is an annotated example config section that can be used as a starting point. # You can disable the builtin admin account by leaving out 'adminPassword'. Requires another backend to be configured. adminPassword : \"<admin password>\" # adminUsername sets the user for the Basic/Simple Auth admin account if adminPassword is set. # Every user of the basic and simple backend with a username matching adminUsername will have admin privileges. adminUsername : \"admin\" # Configure zero or more authentication backends auth : sessionStore : # 32 random bytes in hexadecimal encoding (64 chars) used to sign session cookies. It's generated randomly # if not present. Need to be set when running in HA setup (more than one replica) secret : \"<session store secret>\" simple : # Users is a list of htpasswd encoded username:password pairs # supports BCrypt, Sha, Ssha, Md5 # You can create a user using \"htpasswd -nB <username>\" users : [] # HTTP Basic Authentication basic : # Users is a list of htpasswd encoded username:password pairs # supports BCrypt, Sha, Ssha, Md5 # You can create a user using \"htpasswd -nB <username>\" users : [] oidc : # A name for the backend (can be anything you want) name : \"My OIDC Backend\" # Should point to the OIDC Issuer (excluding /.well-known/openid-configuration) issuer : \"https://identity.example.com\" # Your OIDC client credentials which would be provided by your OIDC provider clientID : \"<client-id>\" clientSecret : \"<client-secret>\" # The full redirect URL # The path can be almost anything as long as it doesn't # conflict with a path that the web UI uses. # /callback is recommended. redirectURL : \"https://wg-access-server.example.com/callback\" # List of scopes to request claims for. Must include 'openid'. # Must include 'email' if 'emailDomains' is used. Can include 'profile' to show the user's name in the UI. # Add custom ones if required for 'claimMapping'. # Defaults to [\"openid\"] scopes : - openid - profile - email # You can optionally restrict access to users with an email address # that matches an allowed domain. # If empty or omitted then all email domains will be allowed. emailDomains : - example.com # This is an advanced feature that allows you to define OIDC claim mapping expressions. # This feature is used to define wg-access-server admins based off a claim in your OIDC token. # A JSON-like object of claimKey: claimValue pairs as returned by the issuer is passed to the evaluation function. # See https://github.com/Knetic/govaluate/blob/9aa49832a739dcd78a5542ff189fb82c3e423116/MANUAL.md for the syntax. claimMapping : # This example works if you have a custom group_membership claim which is a list of strings admin : \"'WireguardAdmins' in group_membership\" access : \"'WireguardAccess' in group_membership\" # Let wg-access-server retrieve the claims from the ID Token instead of querying the UserInfo endpoint. # Some OIDC authorization provider implementations (e.g. ADFS) only publish claims in the ID Token. claimsFromIDToken : false # require this claim to be \"true\" to allow access for the user accessClaim : \"access\" gitlab : name : \"My Gitlab Backend\" baseURL : \"https://mygitlab.example.com\" clientID : \"<client-id>\" clientSecret : \"<client-secret>\" redirectURL : \"https:///wg-access-server.example.com/callback\" emailDomains : - example.com OIDC Provider specifics \u00b6 Active Directory Federation Services (ADFS) \u00b6 Please see this helpful issue comment for instructions for ADFS 2016 and above.","title":"Authentication"},{"location":"4-auth/#authentication","text":"Authentication is pluggable in wg-access-server. Community contributions are welcome for supporting new authentication backends. If you're just getting started you can skip over this section and rely on the default admin account instead. If your authentication system is not yet supported and you aren't quite ready to contribute you could try using a project like dex or SaaS provider like Auth0 which supports a wider variety of authentication protocols. wg-access-server can happily be an OpenID Connect client to a larger solution like this. The following authentication backends are currently supported: Backend Use Case Notes Simple Auth Deployments with a static list of users. Simple and great for self-hosters and home use-cases Recommended, default for the admin account Basic Auth Like Simple Auth, but using HTTP Basic Auth for login Logout does not work because browsers caches Basic Auth credentials OpenID Connect For delegating authentication to an existing identity solution Gitlab For delegating authentication to gitlab. Supports self-hosted Gitlab. If adminPassword is set, an administrator account will be added with the username of adminUsername (default admin ) to the Simple Auth or Basic Auth backend; whichever is enabled, automatically enabling Simple if both are unset, preferring Simple to Basic if both are enabled.","title":"Authentication"},{"location":"4-auth/#configuration","text":"Currently authentication providers are only configurable via the wg-access-server config file (config.yaml). Below is an annotated example config section that can be used as a starting point. # You can disable the builtin admin account by leaving out 'adminPassword'. Requires another backend to be configured. adminPassword : \"<admin password>\" # adminUsername sets the user for the Basic/Simple Auth admin account if adminPassword is set. # Every user of the basic and simple backend with a username matching adminUsername will have admin privileges. adminUsername : \"admin\" # Configure zero or more authentication backends auth : sessionStore : # 32 random bytes in hexadecimal encoding (64 chars) used to sign session cookies. It's generated randomly # if not present. Need to be set when running in HA setup (more than one replica) secret : \"<session store secret>\" simple : # Users is a list of htpasswd encoded username:password pairs # supports BCrypt, Sha, Ssha, Md5 # You can create a user using \"htpasswd -nB <username>\" users : [] # HTTP Basic Authentication basic : # Users is a list of htpasswd encoded username:password pairs # supports BCrypt, Sha, Ssha, Md5 # You can create a user using \"htpasswd -nB <username>\" users : [] oidc : # A name for the backend (can be anything you want) name : \"My OIDC Backend\" # Should point to the OIDC Issuer (excluding /.well-known/openid-configuration) issuer : \"https://identity.example.com\" # Your OIDC client credentials which would be provided by your OIDC provider clientID : \"<client-id>\" clientSecret : \"<client-secret>\" # The full redirect URL # The path can be almost anything as long as it doesn't # conflict with a path that the web UI uses. # /callback is recommended. redirectURL : \"https://wg-access-server.example.com/callback\" # List of scopes to request claims for. Must include 'openid'. # Must include 'email' if 'emailDomains' is used. Can include 'profile' to show the user's name in the UI. # Add custom ones if required for 'claimMapping'. # Defaults to [\"openid\"] scopes : - openid - profile - email # You can optionally restrict access to users with an email address # that matches an allowed domain. # If empty or omitted then all email domains will be allowed. emailDomains : - example.com # This is an advanced feature that allows you to define OIDC claim mapping expressions. # This feature is used to define wg-access-server admins based off a claim in your OIDC token. # A JSON-like object of claimKey: claimValue pairs as returned by the issuer is passed to the evaluation function. # See https://github.com/Knetic/govaluate/blob/9aa49832a739dcd78a5542ff189fb82c3e423116/MANUAL.md for the syntax. claimMapping : # This example works if you have a custom group_membership claim which is a list of strings admin : \"'WireguardAdmins' in group_membership\" access : \"'WireguardAccess' in group_membership\" # Let wg-access-server retrieve the claims from the ID Token instead of querying the UserInfo endpoint. # Some OIDC authorization provider implementations (e.g. ADFS) only publish claims in the ID Token. claimsFromIDToken : false # require this claim to be \"true\" to allow access for the user accessClaim : \"access\" gitlab : name : \"My Gitlab Backend\" baseURL : \"https://mygitlab.example.com\" clientID : \"<client-id>\" clientSecret : \"<client-secret>\" redirectURL : \"https:///wg-access-server.example.com/callback\" emailDomains : - example.com","title":"Configuration"},{"location":"4-auth/#oidc-provider-specifics","text":"","title":"OIDC Provider specifics"},{"location":"4-auth/#active-directory-federation-services-adfs","text":"Please see this helpful issue comment for instructions for ADFS 2016 and above.","title":"Active Directory Federation Services (ADFS)"},{"location":"deployment/1-docker/","text":"Docker \u00b6 Load the ip_tables , ip6_tables and wireguard kernel modules on the host. modprobe ip_tables && modprobe ip6_tables && modprobe wireguard # Load modules on boot echo ip_tables >> /etc/modules echo ip6_tables >> /etc/modules echo wireguard >> /etc/modules docker run \\ -it \\ --rm \\ --cap-add NET_ADMIN \\ --device /dev/net/tun:/dev/net/tun \\ --sysctl net.ipv6.conf.all.disable_ipv6 = 0 \\ --sysctl net.ipv6.conf.all.forwarding = 1 \\ -v wg-access-server-data:/data \\ -e \"WG_ADMIN_PASSWORD= $WG_ADMIN_PASSWORD \" \\ -e \"WG_WIREGUARD_PRIVATE_KEY= $WG_WIREGUARD_PRIVATE_KEY \" \\ -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ ghcr.io/freifunkmuc/wg-access-server:latest Modules \u00b6 If you are unable to load the iptables kernel modules, you can add the SYS_MODULE capability instead: --cap-add SYS_MODULE . You must also add the following mount: -v /lib/modules:/lib/modules:ro . This is not recommended as it essentially gives the container root privileges over the host system and an attacker could easily break out of the container. The WireGuard module should be loaded automatically, even without SYS_MODULE capability or /lib/modules mount. If it still fails to load, the server automatically falls back to the userspace implementation. IPv4-only (without IPv6) \u00b6 If you don't want IPv6 inside the VPN network, set WG_VPN_CIDRV6=0 . In this case you can also get rid of the sysctls: docker run \\ -it \\ --rm \\ --cap-add NET_ADMIN \\ --device /dev/net/tun:/dev/net/tun \\ -v wg-access-server-data:/data \\ -e \"WG_ADMIN_PASSWORD= $WG_ADMIN_PASSWORD \" \\ -e \"WG_WIREGUARD_PRIVATE_KEY= $WG_WIREGUARD_PRIVATE_KEY \" \\ -e \"WG_VPN_CIDRV6=0\" -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ ghcr.io/freifunkmuc/wg-access-server:latest Likewise you can disable IPv4 by setting WG_VPN_CIDR=0 .","title":"Docker"},{"location":"deployment/1-docker/#docker","text":"Load the ip_tables , ip6_tables and wireguard kernel modules on the host. modprobe ip_tables && modprobe ip6_tables && modprobe wireguard # Load modules on boot echo ip_tables >> /etc/modules echo ip6_tables >> /etc/modules echo wireguard >> /etc/modules docker run \\ -it \\ --rm \\ --cap-add NET_ADMIN \\ --device /dev/net/tun:/dev/net/tun \\ --sysctl net.ipv6.conf.all.disable_ipv6 = 0 \\ --sysctl net.ipv6.conf.all.forwarding = 1 \\ -v wg-access-server-data:/data \\ -e \"WG_ADMIN_PASSWORD= $WG_ADMIN_PASSWORD \" \\ -e \"WG_WIREGUARD_PRIVATE_KEY= $WG_WIREGUARD_PRIVATE_KEY \" \\ -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ ghcr.io/freifunkmuc/wg-access-server:latest","title":"Docker"},{"location":"deployment/1-docker/#modules","text":"If you are unable to load the iptables kernel modules, you can add the SYS_MODULE capability instead: --cap-add SYS_MODULE . You must also add the following mount: -v /lib/modules:/lib/modules:ro . This is not recommended as it essentially gives the container root privileges over the host system and an attacker could easily break out of the container. The WireGuard module should be loaded automatically, even without SYS_MODULE capability or /lib/modules mount. If it still fails to load, the server automatically falls back to the userspace implementation.","title":"Modules"},{"location":"deployment/1-docker/#ipv4-only-without-ipv6","text":"If you don't want IPv6 inside the VPN network, set WG_VPN_CIDRV6=0 . In this case you can also get rid of the sysctls: docker run \\ -it \\ --rm \\ --cap-add NET_ADMIN \\ --device /dev/net/tun:/dev/net/tun \\ -v wg-access-server-data:/data \\ -e \"WG_ADMIN_PASSWORD= $WG_ADMIN_PASSWORD \" \\ -e \"WG_WIREGUARD_PRIVATE_KEY= $WG_WIREGUARD_PRIVATE_KEY \" \\ -e \"WG_VPN_CIDRV6=0\" -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ ghcr.io/freifunkmuc/wg-access-server:latest Likewise you can disable IPv4 by setting WG_VPN_CIDR=0 .","title":"IPv4-only (without IPv6)"},{"location":"deployment/2-docker-compose/","text":"Docker Compose \u00b6 You can run wg-access-server using the following example Docker Compose file. Checkout the configuration docs to learn how wg-access-server can be configured. Please also read the Docker instructions for general information regarding Docker deployments. version : \"3.0\" services : wg-access-server : # to build the docker image from the source # build: # dockerfile: Dockerfile # context: . image : ghcr.io/freifunkmuc/wg-access-server:latest container_name : wg-access-server cap_add : - NET_ADMIN sysctls : net.ipv6.conf.all.disable_ipv6 : 0 net.ipv6.conf.all.forwarding : 1 volumes : - \"wg-access-server-data:/data\" # - \"./config.yaml:/config.yaml\" # if you have a custom config file environment : - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n export WG_ADMIN_PASSWORD=example\\n}\" - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\" # - \"WG_VPN_CIDRV6=0\" # to disable IPv6 ports : - \"8000:8000/tcp\" - \"51820:51820/udp\" devices : - \"/dev/net/tun:/dev/net/tun\" # shared volumes with the host volumes : wg-access-server-data : driver : local IPv4-only (without IPv6) \u00b6 version : \"3.0\" services : wg-access-server : image : ghcr.io/freifunkmuc/wg-access-server:latest container_name : wg-access-server cap_add : - NET_ADMIN volumes : - \"wg-access-server-data:/data\" environment : - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n export WG_ADMIN_PASSWORD=example\\n}\" - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\" - \"WG_VPN_CIDRV6=0\" # to disable IPv6 ports : - \"8000:8000/tcp\" - \"51820:51820/udp\" devices : - \"/dev/net/tun:/dev/net/tun\" volumes : wg-access-server-data : driver : local","title":"Docker Compose"},{"location":"deployment/2-docker-compose/#docker-compose","text":"You can run wg-access-server using the following example Docker Compose file. Checkout the configuration docs to learn how wg-access-server can be configured. Please also read the Docker instructions for general information regarding Docker deployments. version : \"3.0\" services : wg-access-server : # to build the docker image from the source # build: # dockerfile: Dockerfile # context: . image : ghcr.io/freifunkmuc/wg-access-server:latest container_name : wg-access-server cap_add : - NET_ADMIN sysctls : net.ipv6.conf.all.disable_ipv6 : 0 net.ipv6.conf.all.forwarding : 1 volumes : - \"wg-access-server-data:/data\" # - \"./config.yaml:/config.yaml\" # if you have a custom config file environment : - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n export WG_ADMIN_PASSWORD=example\\n}\" - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\" # - \"WG_VPN_CIDRV6=0\" # to disable IPv6 ports : - \"8000:8000/tcp\" - \"51820:51820/udp\" devices : - \"/dev/net/tun:/dev/net/tun\" # shared volumes with the host volumes : wg-access-server-data : driver : local","title":"Docker Compose"},{"location":"deployment/2-docker-compose/#ipv4-only-without-ipv6","text":"version : \"3.0\" services : wg-access-server : image : ghcr.io/freifunkmuc/wg-access-server:latest container_name : wg-access-server cap_add : - NET_ADMIN volumes : - \"wg-access-server-data:/data\" environment : - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n export WG_ADMIN_PASSWORD=example\\n}\" - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\" - \"WG_VPN_CIDRV6=0\" # to disable IPv6 ports : - \"8000:8000/tcp\" - \"51820:51820/udp\" devices : - \"/dev/net/tun:/dev/net/tun\" volumes : wg-access-server-data : driver : local","title":"IPv4-only (without IPv6)"},{"location":"deployment/3-kubernetes/","text":"Helm Chart \u00b6 The Helm chart included in this repository has been removed due to lack of expertise on our side and nobody answering our call for aid. If you are a Kubernetes/Helm user, please consider stepping up and taking over maintenance of the chart at https://github.com/freifunkMUC/wg-access-server-chart .","title":"Helm Chart"},{"location":"deployment/3-kubernetes/#helm-chart","text":"The Helm chart included in this repository has been removed due to lack of expertise on our side and nobody answering our call for aid. If you are a Kubernetes/Helm user, please consider stepping up and taking over maintenance of the chart at https://github.com/freifunkMUC/wg-access-server-chart .","title":"Helm Chart"}]}